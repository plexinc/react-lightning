name: Release

on:
  workflow_run:
    workflows: ["Run tests"]
    branches: [main]
    types:
      - completed

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  pages: write      # to deploy to Pages
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      deploy_docs: ${{ steps.changesets.outputs.publish }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch all commit history for generating the changelog.
          fetch-depth: 0
          # Avoid configuring the token with the local git config in favor of
          # our own environment token (see below).
          persist-credentials: false

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        env:
            NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          node-version-file: package.json
          cache: "pnpm"
          always-auth: 'true'
          scope: '@plexinc'
          registry-url: "https://registry.npmjs.org"

      - run: pnpm install --frozen-lockfile

      - name: Create release pull request or publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm run ci:version
          commit: "chore: Update versions"
          title: "chore: Update versions"
          publish: pnpm run ci:publish
        env:
          # When you use the repository's GITHUB_TOKEN to perform tasks, events
          # triggered by the GITHUB_TOKEN will not create a new workflow run.
          # This means that checks won't run on the release PRs. We work around
          # this by using our own GH_TOKEN_REPO_ACCESS organization secret.
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_ACCESS }}

      - name: Upload storybook static files as artifact
        if: steps.changesets.outputs.publish == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/storybook/dist/

  deploy-pages:
    needs: release
    name: Deploy Docs to GitHub Pages
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.deploy_docs == 'true' }}
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
  
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
