diff --git a/dist/src/core/CoreNode.js b/dist/src/core/CoreNode.js
index c827703e9843c60f2e163711170027536d27ff22..da09ae234c04299648bce69b2be118df4f9749eb 100644
--- a/dist/src/core/CoreNode.js
+++ b/dist/src/core/CoreNode.js
@@ -17,7 +17,6 @@
  * limitations under the License.
  */
 import { assertTruthy, getNewId, mergeColorAlphaPremultiplied, } from '../utils.js';
-import {} from './textures/Texture.js';
 import { EventEmitter } from '../common/EventEmitter.js';
 import { copyRect, intersectRect, createBound, boundInsideBound, boundLargeThanBound, createPreloadBounds, } from './lib/utils.js';
 import { Matrix3d } from './lib/Matrix3d.js';
diff --git a/dist/src/core/animations/CoreAnimation.js b/dist/src/core/animations/CoreAnimation.js
index 0d9176fb7c3b18c7a6c975c2eea18d240d244f51..e98de0fa31035d3e65f386874dc9ce634c715c92 100644
--- a/dist/src/core/animations/CoreAnimation.js
+++ b/dist/src/core/animations/CoreAnimation.js
@@ -16,7 +16,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import {} from '../CoreNode.js';
 import { getTimingFunction } from '../utils.js';
 import { mergeColorProgress } from '../../utils.js';
 import { EventEmitter } from '../../common/EventEmitter.js';
diff --git a/dist/src/core/lib/ImageWorker.js b/dist/src/core/lib/ImageWorker.js
index 358b2a35263c27939ceb4b21e9cab853c19c28b5..d4b5559200851f9fc00f0e83f596d01e98520e0e 100644
--- a/dist/src/core/lib/ImageWorker.js
+++ b/dist/src/core/lib/ImageWorker.js
@@ -16,7 +16,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import {} from '../textures/Texture.js';
 /**
  * Note that, within the createImageWorker function, we must only use ES5 code to keep it ES5-valid after babelifying, as
  *  the converted code of this section is converted to a blob and used as the js of the web worker thread.
diff --git a/dist/src/core/lib/WebGlContextWrapper.js b/dist/src/core/lib/WebGlContextWrapper.js
index 3b9287e2749f16949715c552392e2193ccc2d3e0..0dd27c125a342874093e2dca0aeb38ab8cec73c1 100644
--- a/dist/src/core/lib/WebGlContextWrapper.js
+++ b/dist/src/core/lib/WebGlContextWrapper.js
@@ -41,6 +41,7 @@ export class WebGlContextWrapper {
     boundArrayBuffer;
     boundElementArrayBuffer;
     curProgram;
+    curUniformLocations;
     //#endregion Cached WebGL State
     //#region Canvas
     canvas;
@@ -116,6 +117,7 @@ export class WebGlContextWrapper {
         this.boundArrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);
         this.boundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
         this.curProgram = gl.getParameter(gl.CURRENT_PROGRAM);
+        this.curUniformLocations = {}
         this.canvas = gl.canvas;
         // Extract GLenums
         this.MAX_RENDERBUFFER_SIZE = gl.MAX_RENDERBUFFER_SIZE;
@@ -527,7 +529,7 @@ export class WebGlContextWrapper {
         const result = {};
         for (let i = 0; i < length; i++) {
             const { name } = gl.getActiveUniform(program, i);
-            result[name] = i;
+            result[name] = gl.getUniformLocation(program, name);
         }
         return result;
     }
@@ -554,12 +556,13 @@ export class WebGlContextWrapper {
      * @param program
      * @returns
      */
-    useProgram(program) {
+    useProgram(program, uniformLocations) {
         if (this.curProgram === program) {
             return;
         }
         this.gl.useProgram(program);
         this.curProgram = program;
+        this.curUniformLocations = uniformLocations;
     }
     /**
      * Sets the value of a single float uniform variable.
@@ -568,7 +571,7 @@ export class WebGlContextWrapper {
      * @param v0 - The value to set.
      */
     uniform1f(location, v0) {
-        this.gl.uniform1f(this.gl.getUniformLocation(this.curProgram, location), v0);
+        this.gl.uniform1f(this.curUniformLocations[location] || null, v0);
     }
     /**
      * Sets the value of a float array uniform variable.
@@ -577,7 +580,7 @@ export class WebGlContextWrapper {
      * @param value - The array of values to set.
      */
     uniform1fv(location, value) {
-        this.gl.uniform1fv(this.gl.getUniformLocation(this.curProgram, location), value);
+        this.gl.uniform1fv(this.curUniformLocations[location] || null, value);
     }
     /**
      * Sets the value of a single integer uniform variable.
@@ -586,7 +589,7 @@ export class WebGlContextWrapper {
      * @param v0 - The value to set.
      */
     uniform1i(location, v0) {
-        this.gl.uniform1i(this.gl.getUniformLocation(this.curProgram, location), v0);
+        this.gl.uniform1i(this.curUniformLocations[location] || null, v0);
     }
     /**
      * Sets the value of an integer array uniform variable.
@@ -595,7 +598,7 @@ export class WebGlContextWrapper {
      * @param value - The array of values to set.
      */
     uniform1iv(location, value) {
-        this.gl.uniform1iv(this.gl.getUniformLocation(this.curProgram, location), value);
+        this.gl.uniform1iv(this.curUniformLocations[location] || null, value);
     }
     /**
      * Sets the value of a vec2 uniform variable.
@@ -605,7 +608,7 @@ export class WebGlContextWrapper {
      * @param v1 - The second component of the vector.
      */
     uniform2f(location, v0, v1) {
-        this.gl.uniform2f(this.gl.getUniformLocation(this.curProgram, location), v0, v1);
+        this.gl.uniform2f(this.curUniformLocations[location] || null, v0, v1);
     }
     /**
      * Sets the value of a vec3 uniform variable.
@@ -614,7 +617,7 @@ export class WebGlContextWrapper {
      * @param v - array of 4 numbers.
      */
     uniform2fa(location, value) {
-        this.gl.uniform2f(this.gl.getUniformLocation(this.curProgram, location), value[0], value[1]);
+        this.gl.uniform2f(this.curUniformLocations[location] || null, value[0], value[1]);
     }
     /**
      * Sets the value of a vec2 array uniform variable.
@@ -623,7 +626,7 @@ export class WebGlContextWrapper {
      * @param value - The array of vec2 values to set.
      */
     uniform2fv(location, value) {
-        this.gl.uniform2fv(this.gl.getUniformLocation(this.curProgram, location), value);
+        this.gl.uniform2fv(this.curUniformLocations[location] || null, value);
     }
     /**
      * Sets the value of a ivec2 uniform variable.
@@ -633,7 +636,7 @@ export class WebGlContextWrapper {
      * @param v1 - The second component of the vector.
      */
     uniform2i(location, v0, v1) {
-        this.gl.uniform2i(this.gl.getUniformLocation(this.curProgram, location), v0, v1);
+        this.gl.uniform2i(this.curUniformLocations[location] || null, v0, v1);
     }
     /**
      * Sets the value of an ivec2 array uniform variable.
@@ -642,7 +645,7 @@ export class WebGlContextWrapper {
      * @param value - The array of ivec2 values to set.
      */
     uniform2iv(location, value) {
-        this.gl.uniform2iv(this.gl.getUniformLocation(this.curProgram, location), value);
+        this.gl.uniform2iv(this.curUniformLocations[location] || null, value);
     }
     /**
      * Sets the value of a vec3 uniform variable.
@@ -653,7 +656,7 @@ export class WebGlContextWrapper {
      * @param v2 - The third component of the vector.
      */
     uniform3f(location, v0, v1, v2) {
-        this.gl.uniform3f(this.gl.getUniformLocation(this.curProgram, location), v0, v1, v2);
+        this.gl.uniform3f(this.curUniformLocations[location] || null, v0, v1, v2);
     }
     /**
      * Sets the value of a vec3 uniform variable.
@@ -662,7 +665,7 @@ export class WebGlContextWrapper {
      * @param v - array of 4 numbers.
      */
     uniform3fa(location, value) {
-        this.gl.uniform3f(this.gl.getUniformLocation(this.curProgram, location), value[0], value[1], value[2]);
+        this.gl.uniform3f(this.curUniformLocations[location] || null, value[0], value[1], value[2]);
     }
     /**
      * Sets the value of a vec3 array uniform variable.
@@ -671,7 +674,7 @@ export class WebGlContextWrapper {
      * @param value - The array of vec3 values to set.
      */
     uniform3fv(location, value) {
-        this.gl.uniform3fv(this.gl.getUniformLocation(this.curProgram, location), value);
+        this.gl.uniform3fv(this.curUniformLocations[location] || null, value);
     }
     /**
      * Sets the value of a ivec3 uniform variable.
@@ -682,7 +685,7 @@ export class WebGlContextWrapper {
      * @param v2 - The third component of the vector.
      */
     uniform3i(location, v0, v1, v2) {
-        this.gl.uniform3i(this.gl.getUniformLocation(this.curProgram, location), v0, v1, v2);
+        this.gl.uniform3i(this.curUniformLocations[location] || null, v0, v1, v2);
     }
     /**
      * Sets the value of an ivec3 array uniform variable.
@@ -691,7 +694,7 @@ export class WebGlContextWrapper {
      * @param value - The array of ivec3 values to set.
      */
     uniform3iv(location, value) {
-        this.gl.uniform3iv(this.gl.getUniformLocation(this.curProgram, location), value);
+        this.gl.uniform3iv(this.curUniformLocations[location] || null, value);
     }
     /**
      * Sets the value of a vec4 uniform variable.
@@ -703,7 +706,7 @@ export class WebGlContextWrapper {
      * @param v3 - The fourth component of the vector.
      */
     uniform4f(location, v0, v1, v2, v3) {
-        this.gl.uniform4f(this.gl.getUniformLocation(this.curProgram, location), v0, v1, v2, v3);
+        this.gl.uniform4f(this.curUniformLocations[location] || null, v0, v1, v2, v3);
     }
     /**
      * Sets the value of a vec4 uniform variable.
@@ -712,7 +715,7 @@ export class WebGlContextWrapper {
      * @param v - array of 4 numbers.
      */
     uniform4fa(location, value) {
-        this.gl.uniform4f(this.gl.getUniformLocation(this.curProgram, location), value[0], value[1], value[2], value[3]);
+        this.gl.uniform4f(this.curUniformLocations[location] || null, value[0], value[1], value[2], value[3]);
     }
     /**
      * Sets the value of a vec4 array uniform variable.
@@ -721,7 +724,7 @@ export class WebGlContextWrapper {
      * @param value - The array of vec4 values to set.
      */
     uniform4fv(location, value) {
-        this.gl.uniform4fv(this.gl.getUniformLocation(this.curProgram, location), value);
+        this.gl.uniform4fv(this.curUniformLocations[location] || null, value);
     }
     /**
      * Sets the value of a ivec4 uniform variable.
@@ -733,7 +736,7 @@ export class WebGlContextWrapper {
      * @param v3 - The fourth component of the vector.
      */
     uniform4i(location, v0, v1, v2, v3) {
-        this.gl.uniform4i(this.gl.getUniformLocation(this.curProgram, location), v0, v1, v2, v3);
+        this.gl.uniform4i(this.curUniformLocations[location] || null, v0, v1, v2, v3);
     }
     /**
      * Sets the value of an ivec4 array uniform variable.
@@ -742,7 +745,7 @@ export class WebGlContextWrapper {
      * @param value - The array of ivec4 values to set.
      */
     uniform4iv(location, value) {
-        this.gl.uniform4iv(this.gl.getUniformLocation(this.curProgram, location), value);
+        this.gl.uniform4iv(this.curUniformLocations[location] || null, value);
     }
     /**
      * Sets the value of a mat2 uniform variable.
@@ -752,7 +755,7 @@ export class WebGlContextWrapper {
      * @param value - The array of mat2 values to set.
      */
     uniformMatrix2fv(location, value) {
-        this.gl.uniformMatrix2fv(this.gl.getUniformLocation(this.curProgram, location), false, value);
+        this.gl.uniformMatrix2fv(this.curUniformLocations[location] || null, false, value);
     }
     /**
      * Sets the value of a mat2 uniform variable.
@@ -760,7 +763,7 @@ export class WebGlContextWrapper {
      * @param value - The array of mat2 values to set.
      */
     uniformMatrix3fv(location, value) {
-        this.gl.uniformMatrix3fv(this.gl.getUniformLocation(this.curProgram, location), false, value);
+        this.gl.uniformMatrix3fv(this.curUniformLocations[location] || null, false, value);
     }
     /**
      * Sets the value of a mat4 uniform variable.
@@ -768,7 +771,7 @@ export class WebGlContextWrapper {
      * @param value - The array of mat4 values to set.
      */
     uniformMatrix4fv(location, value) {
-        this.gl.uniformMatrix4fv(this.gl.getUniformLocation(this.curProgram, location), false, value);
+        this.gl.uniformMatrix4fv(this.curUniformLocations[location] || null, false, value);
     }
     /**
      * ```
@@ -1012,6 +1015,37 @@ export class WebGlContextWrapper {
     deleteShader(shader) {
         this.gl.deleteShader(shader);
     }
+
+
+
+  /**
+   * ```
+   * gl.deleteBuffer(buffer);
+   * ```
+   *
+   * @param buffer - The buffer to delete
+   */
+  deleteBuffer(buffer) {
+    const { gl } = this;
+    gl.deleteBuffer(buffer);
+    // Reset bound buffers if they match the deleted buffer
+    if (this.boundArrayBuffer === buffer) {
+      this.boundArrayBuffer = null;
+    }
+  }
+
+  /**
+   * ```
+   * gl.deleteVertexArray(vertexArray);
+   * ```
+   *
+   * @param vertexArray - The vertex array object to delete
+   */
+  deleteVertexArray(vertexArray) {
+    if (this.isWebGl2()) {
+      this.gl.deleteVertexArray(vertexArray);
+    }
+  }
 }
 /**
  * Compare two arrays for equality.
diff --git a/dist/src/core/lib/textureCompression.js b/dist/src/core/lib/textureCompression.js
index 2939340ce4dc06a7b04c55ff5a606141e2fd7232..84de5d8f29aff93c3d650497d16cfbc1d85d5f31 100644
--- a/dist/src/core/lib/textureCompression.js
+++ b/dist/src/core/lib/textureCompression.js
@@ -16,7 +16,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import {} from '../textures/Texture.js';
 /**
  * Tests if the given location is a compressed texture container
  * @param url
diff --git a/dist/src/core/lib/textureSvg.js b/dist/src/core/lib/textureSvg.js
index b7bf8b8eb1986512ff4e992c2007ab966ad26b4e..0039b9e6871d8e90db4ff9eacdc6f61d138a4d8f 100644
--- a/dist/src/core/lib/textureSvg.js
+++ b/dist/src/core/lib/textureSvg.js
@@ -17,7 +17,6 @@
  * limitations under the License.
  */
 import { assertTruthy } from '../../utils.js';
-import {} from '../textures/Texture.js';
 /**
  * Tests if the given location is a SVG
  * @param url
diff --git a/dist/src/core/platforms/Platform.js b/dist/src/core/platforms/Platform.js
index db1674c0935f369c4d6d3e873d24c55013fb41fd..551ff25c3d711df1609bdff893f332089a75ff01 100644
--- a/dist/src/core/platforms/Platform.js
+++ b/dist/src/core/platforms/Platform.js
@@ -16,7 +16,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import {} from '../Stage.js';
 export class Platform {
 }
 //# sourceMappingURL=Platform.js.map
\ No newline at end of file
diff --git a/dist/src/core/renderers/webgl/WebGlShaderProgram.js b/dist/src/core/renderers/webgl/WebGlShaderProgram.js
index 693f7cf3283b1eda6efe24aad34b01663a112d4a..642aa57edd2683a9534258f8ba42daf4957f5a75 100644
--- a/dist/src/core/renderers/webgl/WebGlShaderProgram.js
+++ b/dist/src/core/renderers/webgl/WebGlShaderProgram.js
@@ -13,9 +13,11 @@ export class WebGlShaderProgram {
     renderer;
     glw;
     attributeLocations;
+    uniformLocations;
     lifecycle;
     useSystemAlpha = false;
     useSystemDimensions = false;
+    isDestroyed = false;
     supportsIndexedTextures = false;
     constructor(renderer, config, resolvedProps) {
         this.renderer = renderer;
@@ -58,6 +60,12 @@ export class WebGlShaderProgram {
         }
         this.program = program;
         this.attributeLocations = glw.getAttributeLocations(program);
+
+        const uniLocs = (this.uniformLocations = glw.getUniformLocations(program));
+
+        this.useSystemAlpha = uniLocs['u_alpha'] !== undefined;
+        this.useSystemDimensions = uniLocs['u_dimensions'] !== undefined;
+
         this.useSystemAlpha =
             this.glw.getUniformLocation(program, 'u_alpha') !== null;
         this.useSystemDimensions =
@@ -71,7 +79,7 @@ export class WebGlShaderProgram {
         this.glw.disableVertexAttribArray(location);
     }
     disableAttributes() {
-        const { glw } = this;
+        const glw = this.glw;
         const attribs = Object.keys(this.attributeLocations);
         const attribLen = attribs.length;
         for (let i = 0; i < attribLen; i++) {
@@ -136,12 +144,12 @@ export class WebGlShaderProgram {
             this.glw.uniform1f('u_pixelRatio', renderOp.renderer.stage.pixelRatio);
             this.glw.uniform2f('u_resolution', this.glw.canvas.width, this.glw.canvas.height);
         }
-        // if (this.useSystemAlpha) {
-        this.glw.uniform1f('u_alpha', renderOp.alpha);
-        // }
-        // if (this.useSystemDimensions) {
-        this.glw.uniform2f('u_dimensions', renderOp.width, renderOp.height);
-        // }
+        if (this.useSystemAlpha === true) {
+            this.glw.uniform1f('u_alpha', renderOp.alpha);
+        }
+        if (this.useSystemDimensions === true) {
+            this.glw.uniform2f('u_dimensions', renderOp.width, renderOp.height);
+        }
         /**temporary fix to make sdf texts work */
         if (renderOp.sdfShaderProps !== undefined) {
             renderOp.shader.shaderType.onSdfBind?.call(this.glw, renderOp.sdfShaderProps);
@@ -189,7 +197,10 @@ export class WebGlShaderProgram {
         this.glw.bindTexture(textures[0].ctxTexture);
     }
     attach() {
-        this.glw.useProgram(this.program);
+        if (this.isDestroyed === true) {
+            return;
+        }
+        this.glw.useProgram(this.program, this.uniformLocations);
         if (this.glw.isWebGl2() && this.vao) {
             this.glw.bindVertexArray(this.vao);
         }
@@ -197,5 +208,21 @@ export class WebGlShaderProgram {
     detach() {
         this.disableAttributes();
     }
+
+    destroy() {
+        if (this.isDestroyed === true) {
+            return;
+        }
+        const glw = this.glw;
+        this.detach();
+        glw.deleteProgram(this.program);
+        this.program = null;
+        this.uniformLocations = null;
+        const attribs = Object.keys(this.attributeLocations);
+        const attribLen = attribs.length;
+        for (let i = 0; i < attribLen; i++) {
+              this.glw.deleteBuffer(attribs[i]);
+        }
+    }
 }
 //# sourceMappingURL=WebGlShaderProgram.js.map
\ No newline at end of file
diff --git a/dist/src/core/text-rendering/renderers/CanvasTextRenderer.js b/dist/src/core/text-rendering/renderers/CanvasTextRenderer.js
index 96c964f2b00710e2ce6cee53fbbfa1aff84e8e6d..14e09cc7a20cb0dc3f0318aaf1ca0c13e23c1949 100644
--- a/dist/src/core/text-rendering/renderers/CanvasTextRenderer.js
+++ b/dist/src/core/text-rendering/renderers/CanvasTextRenderer.js
@@ -19,7 +19,6 @@
 import { EventEmitter } from '../../../common/EventEmitter.js';
 import { assertTruthy } from '../../../utils.js';
 import { getNormalizedRgbaComponents, getNormalizedAlphaComponent, } from '../../lib/utils.js';
-import {} from '../TrFontManager.js';
 import { WebTrFontFace } from '../font-face-types/WebTrFontFace.js';
 import { LightningTextTextureRenderer, } from './LightningTextTextureRenderer.js';
 import { TextRenderer, } from './TextRenderer.js';
diff --git a/dist/src/core/text-rendering/renderers/SdfTextRenderer/SdfTextRenderer.js b/dist/src/core/text-rendering/renderers/SdfTextRenderer/SdfTextRenderer.js
index d8683b56d1f1c721d46b14dba941fdbf402f4080..685897fce8c6eb83c4774b96af83ee57efba4ef5 100644
--- a/dist/src/core/text-rendering/renderers/SdfTextRenderer/SdfTextRenderer.js
+++ b/dist/src/core/text-rendering/renderers/SdfTextRenderer/SdfTextRenderer.js
@@ -23,7 +23,6 @@ import { FLOATS_PER_GLYPH } from './internal/constants.js';
 import { getStartConditions } from './internal/getStartConditions.js';
 import { layoutText } from './internal/layoutText.js';
 import { setRenderWindow, } from './internal/setRenderWindow.js';
-import {} from '../../TrFontManager.js';
 import { assertTruthy, mergeColorAlpha } from '../../../../utils.js';
 import { WebGlRenderOp } from '../../../renderers/webgl/WebGlRenderOp.js';
 import { BufferCollection } from '../../../renderers/webgl/internal/BufferCollection.js';
diff --git a/dist/src/main-api/Inspector.js b/dist/src/main-api/Inspector.js
index c1ee9916a8d2f1651454e1848a34ce0eaf91a837..467ccc88ba7482e8c50495bcba501f912d243aa0 100644
--- a/dist/src/main-api/Inspector.js
+++ b/dist/src/main-api/Inspector.js
@@ -1,5 +1,4 @@
 import { CoreNode, } from '../core/CoreNode.js';
-import {} from './Renderer.js';
 import { isProductionEnvironment } from '../utils.js';
 import { CoreTextNode } from '../core/CoreTextNode.js';
 const stylePropertyMap = {
diff --git a/dist/src/main-api/Renderer.js b/dist/src/main-api/Renderer.js
index 43e8663df334242f8f9c987c5827773d5ac9e025..3d090fbf38960562b2734a728281814903dbe8f5 100644
--- a/dist/src/main-api/Renderer.js
+++ b/dist/src/main-api/Renderer.js
@@ -20,7 +20,6 @@ import { EventEmitter } from '../common/EventEmitter.js';
 import { isProductionEnvironment } from '../utils.js';
 import { Stage } from '../core/Stage.js';
 import { CoreNode } from '../core/CoreNode.js';
-import {} from '../core/CoreTextNode.js';
 import { WebPlatform } from '../core/platforms/web/WebPlatform.js';
 import { Platform } from '../core/platforms/Platform.js';
 /**
diff --git a/src/core/lib/WebGlContextWrapper.ts b/src/core/lib/WebGlContextWrapper.ts
index 3e2fd2d6b26bb606b5082946e67d3897c1b7e187..459384020cc0bdfeda7dd2b84bf5ff327323226a 100644
--- a/src/core/lib/WebGlContextWrapper.ts
+++ b/src/core/lib/WebGlContextWrapper.ts
@@ -50,6 +50,7 @@ export class WebGlContextWrapper {
   private boundArrayBuffer: WebGLBuffer | null;
   private boundElementArrayBuffer: WebGLBuffer | null;
   private curProgram: WebGLProgram | null;
+  private curUniformLocations: Record<string, WebGLUniformLocation> = {};
   //#endregion Cached WebGL State
 
   //#region Canvas
@@ -689,16 +690,21 @@ export class WebGlContextWrapper {
    * @param program
    * @returns object with numbers
    */
-  getUniformLocations(program: WebGLProgram): Record<string, number> {
+  getUniformLocations(
+    program: WebGLProgram,
+  ): Record<string, WebGLUniformLocation> {
     const gl = this.gl;
     const length = gl.getProgramParameter(
       program,
       gl.ACTIVE_UNIFORMS,
     ) as number;
-    const result = {} as Record<string, number>;
+    const result = {} as Record<string, WebGLUniformLocation>;
     for (let i = 0; i < length; i++) {
       const { name } = gl.getActiveUniform(program, i) as WebGLActiveInfo;
-      result[name] = i;
+      result[name] = gl.getUniformLocation(
+        program,
+        name,
+      ) as WebGLUniformLocation;
     }
     return result;
   }
@@ -730,12 +736,16 @@ export class WebGlContextWrapper {
    * @param program
    * @returns
    */
-  useProgram(program: WebGLProgram | null) {
+  useProgram(
+    program: WebGLProgram | null,
+    uniformLocations: Record<string, WebGLUniformLocation>,
+  ) {
     if (this.curProgram === program) {
       return;
     }
     this.gl.useProgram(program);
     this.curProgram = program;
+    this.curUniformLocations = uniformLocations;
   }
 
   /**
@@ -745,10 +755,7 @@ export class WebGlContextWrapper {
    * @param v0 - The value to set.
    */
   uniform1f(location: string, v0: number) {
-    this.gl.uniform1f(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      v0,
-    );
+    this.gl.uniform1f(this.curUniformLocations[location] || null, v0);
   }
 
   /**
@@ -758,10 +765,7 @@ export class WebGlContextWrapper {
    * @param value - The array of values to set.
    */
   uniform1fv(location: string, value: Float32Array) {
-    this.gl.uniform1fv(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      value,
-    );
+    this.gl.uniform1fv(this.curUniformLocations[location] || null, value);
   }
 
   /**
@@ -771,10 +775,7 @@ export class WebGlContextWrapper {
    * @param v0 - The value to set.
    */
   uniform1i(location: string, v0: number) {
-    this.gl.uniform1i(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      v0,
-    );
+    this.gl.uniform1i(this.curUniformLocations[location] || null, v0);
   }
 
   /**
@@ -784,10 +785,7 @@ export class WebGlContextWrapper {
    * @param value - The array of values to set.
    */
   uniform1iv(location: string, value: Int32Array) {
-    this.gl.uniform1iv(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      value,
-    );
+    this.gl.uniform1iv(this.curUniformLocations[location] || null, value);
   }
 
   /**
@@ -798,11 +796,7 @@ export class WebGlContextWrapper {
    * @param v1 - The second component of the vector.
    */
   uniform2f(location: string, v0: number, v1: number) {
-    this.gl.uniform2f(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      v0,
-      v1,
-    );
+    this.gl.uniform2f(this.curUniformLocations[location] || null, v0, v1);
   }
 
   /**
@@ -813,7 +807,7 @@ export class WebGlContextWrapper {
    */
   uniform2fa(location: string, value: Vec2) {
     this.gl.uniform2f(
-      this.gl.getUniformLocation(this.curProgram!, location),
+      this.curUniformLocations[location] || null,
       value[0],
       value[1],
     );
@@ -826,10 +820,7 @@ export class WebGlContextWrapper {
    * @param value - The array of vec2 values to set.
    */
   uniform2fv(location: string, value: Float32Array) {
-    this.gl.uniform2fv(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      value,
-    );
+    this.gl.uniform2fv(this.curUniformLocations[location] || null, value);
   }
 
   /**
@@ -840,11 +831,7 @@ export class WebGlContextWrapper {
    * @param v1 - The second component of the vector.
    */
   uniform2i(location: string, v0: number, v1: number) {
-    this.gl.uniform2i(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      v0,
-      v1,
-    );
+    this.gl.uniform2i(this.curUniformLocations[location] || null, v0, v1);
   }
 
   /**
@@ -854,10 +841,7 @@ export class WebGlContextWrapper {
    * @param value - The array of ivec2 values to set.
    */
   uniform2iv(location: string, value: Int32Array) {
-    this.gl.uniform2iv(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      value,
-    );
+    this.gl.uniform2iv(this.curUniformLocations[location] || null, value);
   }
 
   /**
@@ -869,12 +853,7 @@ export class WebGlContextWrapper {
    * @param v2 - The third component of the vector.
    */
   uniform3f(location: string, v0: number, v1: number, v2: number) {
-    this.gl.uniform3f(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      v0,
-      v1,
-      v2,
-    );
+    this.gl.uniform3f(this.curUniformLocations[location] || null, v0, v1, v2);
   }
 
   /**
@@ -885,7 +864,7 @@ export class WebGlContextWrapper {
    */
   uniform3fa(location: string, value: Vec3) {
     this.gl.uniform3f(
-      this.gl.getUniformLocation(this.curProgram!, location),
+      this.curUniformLocations[location] || null,
       value[0],
       value[1],
       value[2],
@@ -899,10 +878,7 @@ export class WebGlContextWrapper {
    * @param value - The array of vec3 values to set.
    */
   uniform3fv(location: string, value: Float32Array) {
-    this.gl.uniform3fv(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      value,
-    );
+    this.gl.uniform3fv(this.curUniformLocations[location] || null, value);
   }
 
   /**
@@ -914,12 +890,7 @@ export class WebGlContextWrapper {
    * @param v2 - The third component of the vector.
    */
   uniform3i(location: string, v0: number, v1: number, v2: number) {
-    this.gl.uniform3i(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      v0,
-      v1,
-      v2,
-    );
+    this.gl.uniform3i(this.curUniformLocations[location] || null, v0, v1, v2);
   }
 
   /**
@@ -929,10 +900,7 @@ export class WebGlContextWrapper {
    * @param value - The array of ivec3 values to set.
    */
   uniform3iv(location: string, value: Int32Array) {
-    this.gl.uniform3iv(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      value,
-    );
+    this.gl.uniform3iv(this.curUniformLocations[location] || null, value);
   }
 
   /**
@@ -946,7 +914,7 @@ export class WebGlContextWrapper {
    */
   uniform4f(location: string, v0: number, v1: number, v2: number, v3: number) {
     this.gl.uniform4f(
-      this.gl.getUniformLocation(this.curProgram!, location),
+      this.curUniformLocations[location] || null,
       v0,
       v1,
       v2,
@@ -962,7 +930,7 @@ export class WebGlContextWrapper {
    */
   uniform4fa(location: string, value: Vec4) {
     this.gl.uniform4f(
-      this.gl.getUniformLocation(this.curProgram!, location),
+      this.curUniformLocations[location] || null,
       value[0],
       value[1],
       value[2],
@@ -977,10 +945,7 @@ export class WebGlContextWrapper {
    * @param value - The array of vec4 values to set.
    */
   uniform4fv(location: string, value: Float32Array) {
-    this.gl.uniform4fv(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      value,
-    );
+    this.gl.uniform4fv(this.curUniformLocations[location] || null, value);
   }
 
   /**
@@ -994,7 +959,7 @@ export class WebGlContextWrapper {
    */
   uniform4i(location: string, v0: number, v1: number, v2: number, v3: number) {
     this.gl.uniform4i(
-      this.gl.getUniformLocation(this.curProgram!, location),
+      this.curUniformLocations[location] || null,
       v0,
       v1,
       v2,
@@ -1009,10 +974,7 @@ export class WebGlContextWrapper {
    * @param value - The array of ivec4 values to set.
    */
   uniform4iv(location: string, value: Int32Array) {
-    this.gl.uniform4iv(
-      this.gl.getUniformLocation(this.curProgram!, location),
-      value,
-    );
+    this.gl.uniform4iv(this.curUniformLocations[location] || null, value);
   }
 
   /**
@@ -1024,7 +986,7 @@ export class WebGlContextWrapper {
    */
   uniformMatrix2fv(location: string, value: Float32Array) {
     this.gl.uniformMatrix2fv(
-      this.gl.getUniformLocation(this.curProgram!, location),
+      this.curUniformLocations[location] || null,
       false,
       value,
     );
@@ -1037,7 +999,7 @@ export class WebGlContextWrapper {
    */
   uniformMatrix3fv(location: string, value: Float32Array) {
     this.gl.uniformMatrix3fv(
-      this.gl.getUniformLocation(this.curProgram!, location),
+      this.curUniformLocations[location] || null,
       false,
       value,
     );
@@ -1050,7 +1012,7 @@ export class WebGlContextWrapper {
    */
   uniformMatrix4fv(location: string, value: Float32Array) {
     this.gl.uniformMatrix4fv(
-      this.gl.getUniformLocation(this.curProgram!, location),
+      this.curUniformLocations[location] || null,
       false,
       value,
     );
@@ -1319,6 +1281,36 @@ export class WebGlContextWrapper {
   deleteShader(shader: WebGLShader) {
     this.gl.deleteShader(shader);
   }
+
+  /**
+   * ```
+   * gl.deleteBuffer(buffer);
+   * ```
+   *
+   * @param buffer - The buffer to delete
+   */
+  deleteBuffer(buffer: WebGLBuffer) {
+    const { gl } = this;
+    gl.deleteBuffer(buffer);
+
+    // Reset bound buffers if they match the deleted buffer
+    if (this.boundArrayBuffer === buffer) {
+      this.boundArrayBuffer = null;
+    }
+  }
+
+  /**
+   * ```
+   * gl.deleteVertexArray(vertexArray);
+   * ```
+   *
+   * @param vertexArray - The vertex array object to delete
+   */
+  deleteVertexArray(vertexArray: WebGLVertexArrayObject) {
+    if (this.isWebGl2()) {
+      (this.gl as WebGL2RenderingContext).deleteVertexArray(vertexArray);
+    }
+  }
 }
 
 // prettier-ignore
diff --git a/src/core/renderers/webgl/WebGlShaderProgram.ts b/src/core/renderers/webgl/WebGlShaderProgram.ts
index 32341829090b7c33c45e9b8524277bd17a29125a..014c18ca967beac394bfc7964271dca9c26ec9ed 100644
--- a/src/core/renderers/webgl/WebGlShaderProgram.ts
+++ b/src/core/renderers/webgl/WebGlShaderProgram.ts
@@ -35,8 +35,7 @@ import {
 } from './internal/ShaderUtils.js';
 
 export class WebGlShaderProgram implements CoreShaderProgram {
-  protected boundBufferCollection: BufferCollection | null = null;
-  protected program: WebGLProgram;
+  protected program: WebGLProgram | null;
   /**
    * Vertex Array Object
    *
@@ -47,9 +46,11 @@ export class WebGlShaderProgram implements CoreShaderProgram {
   protected renderer: WebGlRenderer;
   protected glw: WebGlContextWrapper;
   protected attributeLocations: Record<string, number>;
+  protected uniformLocations: Record<string, WebGLUniformLocation> | null;
   protected lifecycle: Pick<WebGlShaderType, 'update' | 'canBatch'>;
   protected useSystemAlpha = false;
   protected useSystemDimensions = false;
+  private isDestroyed = false;
   supportsIndexedTextures = false;
 
   constructor(
@@ -117,10 +118,10 @@ export class WebGlShaderProgram implements CoreShaderProgram {
     this.program = program;
     this.attributeLocations = glw.getAttributeLocations(program);
 
-    this.useSystemAlpha =
-      this.glw.getUniformLocation(program, 'u_alpha') !== null;
-    this.useSystemDimensions =
-      this.glw.getUniformLocation(program, 'u_dimensions') !== null;
+    const uniLocs = (this.uniformLocations = glw.getUniformLocations(program));
+
+    this.useSystemAlpha = uniLocs['u_alpha'] !== undefined;
+    this.useSystemDimensions = uniLocs['u_dimensions'] !== undefined;
 
     this.lifecycle = {
       update: config.update,
@@ -133,7 +134,7 @@ export class WebGlShaderProgram implements CoreShaderProgram {
   }
 
   disableAttributes() {
-    const { glw } = this;
+    const glw = this.glw;
     const attribs = Object.keys(this.attributeLocations);
     const attribLen = attribs.length;
     for (let i = 0; i < attribLen; i++) {
@@ -221,13 +222,13 @@ export class WebGlShaderProgram implements CoreShaderProgram {
       );
     }
 
-    // if (this.useSystemAlpha) {
-    this.glw.uniform1f('u_alpha', renderOp.alpha);
-    // }
+    if (this.useSystemAlpha === true) {
+      this.glw.uniform1f('u_alpha', renderOp.alpha);
+    }
 
-    // if (this.useSystemDimensions) {
-    this.glw.uniform2f('u_dimensions', renderOp.width, renderOp.height);
-    // }
+    if (this.useSystemDimensions === true) {
+      this.glw.uniform2f('u_dimensions', renderOp.width, renderOp.height);
+    }
 
     /**temporary fix to make sdf texts work */
     if (renderOp.sdfShaderProps !== undefined) {
@@ -306,7 +307,10 @@ export class WebGlShaderProgram implements CoreShaderProgram {
   }
 
   attach(): void {
-    this.glw.useProgram(this.program);
+    if (this.isDestroyed === true) {
+      return;
+    }
+    this.glw.useProgram(this.program, this.uniformLocations!);
     if (this.glw.isWebGl2() && this.vao) {
       this.glw.bindVertexArray(this.vao);
     }
@@ -315,4 +319,23 @@ export class WebGlShaderProgram implements CoreShaderProgram {
   detach(): void {
     this.disableAttributes();
   }
+
+  destroy() {
+    if (this.isDestroyed === true) {
+      return;
+    }
+    const glw = this.glw;
+
+    this.detach();
+
+    glw.deleteProgram(this.program!);
+    this.program = null;
+    this.uniformLocations = null;
+
+    const attribs = Object.keys(this.attributeLocations);
+    const attribLen = attribs.length;
+    for (let i = 0; i < attribLen; i++) {
+      this.glw.deleteBuffer(attribs[i]!);
+    }
+  }
 }
